<?php

namespace app\modules\orhidLegends\models;

use Yii;
use yii\web\UploadedFile;

use yii\helpers\FileHelper;
use yii\imagine\Image;
use yii\helpers\Json;
use Imagine\Image\Box;
use Imagine\Image\Point;
use karpoff\icrop\CropImageUploadBehavior;

/**
 * This is the model class for table "orhid_legends".
 *
 * @property integer $id
 * @property string $title
 * @property string $text
 * @property string $image
 * @property integer $language
 * @property integer $state
 */
class OrhidLegends extends \yii\db\ActiveRecord
{
    public $string;
    public $imageTmp;
    public $coverTmp;
    public $filename;
  public $image;
  public $crop_info;
    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'orhid_legends';
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['title', 'text', 'language', 'state'], 'required'],
            [['language', 'state'], 'integer'],
            [['title'], 'string', 'max' => 64],
            [['text'], 'string'],
      //      [['image','cover'], 'file'],
            ['crop_info', 'safe'],
            ['cover', 'file', 'extensions' => 'jpeg', 'on' => ['insert']],
            [['cover'], 'image',
              'minHeight' => 500,
              'maxSize'=>3*1024*1024,
              'skipOnEmpty' => true
            ],
        ];
    }
    function behaviors()
    {
      return [
        [
          'class' => CropImageUploadBehavior::className(),
          'attribute' => 'cover',
          'scenarios' => ['insert', 'update'],
          'path' => '@webroot',
          'url' => '@web',
          'ratio' => 230/285,
        ],
      ];
    }
    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'title' => 'Title',
            'text' => 'Text',
            'image' => 'Image',
            'cover' => 'Cover',
            'language' => 'Language',
            'state' => 'State',
        ];
    }

    public function beforeSave($insert){
      $this->coverTmp = UploadedFile::getInstance($this, 'cover');
      $this->cover = 'img/orhidlegends/covers/' . substr(uniqid('img'),0,12) . '.' . $this->coverTmp->extension;
       /* $this->string = substr(uniqid('img'),0,12);
        $this->imageTmp = UploadedFile::getInstance($this, 'image');
        $this->coverTmp = UploadedFile::getInstance($this, 'cover');
        if ($this->imageTmp!=null) {
            if (!is_dir('img/orhidlegends/')) mkdir('img/orhidlegends/');
            $this->filename = 'img/orhidlegends/' . $this->string . '.' . $this->imageTmp->extension;
            if ($this->image!= null) $this->imageTmp->saveAs($this->image);
            else
            {
                $this->imageTmp->saveAs($this->filename);
                $this->image = '' . $this->filename;
            }
        }
        if ($this->coverTmp!=null) {
            if (!is_dir('img/orhidlegends/covers')) mkdir('img/orhidlegends/covers');
            $this->filename = 'img/orhidlegends/covers/' . $this->string . '.' . $this->coverTmp->extension;
            if ($this->cover!= null) $this->coverTmp->saveAs($this->cover);
            else
            {
              $this->coverTmp->saveAs($this->filename);
              $this->cover = '' . $this->filename;
            }
        }*/
        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }

  public function afterSave($insert, $changedAttributes)
  {
/*
    // open image
    $image = Image::getImagine()->open($this->cover);

    // rendering information about crop of ONE option
    $cropInfo = Json::decode($this->crop_info)[0];
    $cropInfo['dWidth'] = 100; //new width image
    $cropInfo['dHeight'] = 100; //new height image
    $cropInfo['x'] = 0; //begin position of frame crop by X
    $cropInfo['y'] = 0; //begin position of frame crop by Y

    //delete old images
    $oldImages = FileHelper::findFiles(Yii::getAlias('img/orhidlegends/covers/'), [
      'only' => [
        $this->id . '.*',
        'thumb_' . $this->id . '.*',
      ],
    ]);
    for ($i = 0; $i != count($oldImages); $i++) {
      @unlink($oldImages[$i]);
    }
    unlink($this->cover);
    //saving thumbnail
    $newSizeThumb = new Box($cropInfo['dWidth'], $cropInfo['dHeight']);
    $cropSizeThumb = new Box(100, 100); //frame size of crop
    $cropPointThumb = new Point($cropInfo['x'], $cropInfo['y']);
    $pathThumbImage = $this->cover;
    $image->resize($newSizeThumb)
      ->crop($cropPointThumb, $cropSizeThumb)
      ->save($pathThumbImage, ['quality' => 100]);
*/
    $photo = \yii\web\UploadedFile::getInstance($this, 'cover');

    if ($photo) {
      $path ='img/orhidlegends/covers/';// Путь для сохранения
      if (!file_exists($path)) {
        mkdir($path, 0777, true);   // Создаем директорию при отсутствии
      }

      $request = Yii::$app->request;
      $post = $request->post();

      $class = $this::className();
      $class = str_replace('\\', '/', $class);
      $class = explode('/', $class);
      $class = $class[count($class) - 1];
      $cropParam = array();
      if (isset($post[$class])) {
        $cropParam = explode('-', $post[$class]['cover']);
      }

      if (count($cropParam) != 4) {
        $cropParam = array(0, 0, 100, 100);
      }
      $image = Image::getImagine()->open($photo->tempName);
      $img = (new Image($photo->tempName));

      $imgWidth = $image->getSize()->getWidth();
      $imgHeight =$image->getSize()->getHeight();

      $cropParam[0] = (int)($cropParam[0] * $imgWidth / 100);
      $cropParam[1] = (int)($cropParam[1] * $imgHeight / 100);
      $cropParam[2] = (int)($cropParam[2] * $imgWidth / 100);
      $cropParam[3] = (int)($cropParam[3] * $imgHeight / 100);

      $img->crop($photo->tempName, $cropParam[2]-$cropParam[0], $cropParam[3]-$cropParam[1], [$cropParam[0],$cropParam[1]])
        ->save($this->cover);
    }
  }
}
