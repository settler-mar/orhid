<?php

namespace app\modules\orhidLegends\models;

use Yii;
use yii\web\UploadedFile;

use yii\helpers\FileHelper;
use yii\imagine\Image;
use JBZoo\Image\Image as JBImage;
use yii\helpers\Json;
use Imagine\Image\Box;
use Imagine\Image\Point;
use karpoff\icrop\CropImageUploadBehavior;

/**
 * This is the model class for table "orhid_legends".
 *
 * @property integer $id
 * @property string $title
 * @property string $text
 * @property string $image
 * @property integer $language
 * @property integer $state
 */
class OrhidLegends extends \yii\db\ActiveRecord
{
    public $string;
    public $imageTmp;
    public $coverTmp;
    public $videoTmp;
    public $filename;
    public $cover_del;
    public $video_del;
  public $image;
  public $crop_info;
    /**
     * @inheritdoc
     */
  public function __construct($search=null, $config = [])
  {
    if ($search == 'init'){
      $this->state = 0;
      $this->text = "Text";
      $this->title = "Title";
      $this->save();
      $this->text = "";
      $this->title = "";
    }
    parent::__construct($config);
  }
  public static function tableName()
    {
        return 'orhid_legends';
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['title', 'text', 'state'], 'required'],
            [['state'], 'integer'],
            [['title'], 'string', 'max' => 64],
            [['text'], 'string'],
            [['video_del','cover_del'], 'safe'],
      //      [['image','cover'], 'file'],
            ['crop_info', 'safe'],
            ['cover', 'file', 'extensions' => 'jpeg', 'on' => ['insert']],
            [['cover'], 'image',
              'minHeight' => 500,
              'maxSize'=>3*1024*1024,
              'skipOnEmpty' => true
            ],
        ];
    }
    function behaviors()
    {
      return [
        [
          'class' => CropImageUploadBehavior::className(),
          'attribute' => 'cover',
          'scenarios' => ['insert', 'update'],
          'path' => '@webroot',
          'url' => '@web',
          'ratio' => 230/285,
        ],
      ];
    }

    public function afterFind()
    {
      parent::afterFind(); // TODO: Change the autogenerated stub
      $cover=(Yii::$app->basePath.'/web/'.$this->cover);
      $cover=str_replace('//','/',$cover);
      if(!is_readable($cover)||is_dir($cover)){
        $this->cover='/img/leg.jpg';
      }
    }

  /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'title' => 'Title',
            'text' => 'Text',
            'image' => 'Image',
            'cover' => 'Cover',
            'state' => 'State',
        ];
    }

    public function beforeSave($insert){
      if (($this->title != "Title") && ($this->text != "Text")) {
        $this->coverTmp = UploadedFile::getInstance($this, 'cover');
        $this->videoTmp = UploadedFile::getInstance($this, 'video');
        if ($this->coverTmp){
          $this->cover = 'img/orhidlegends/covers/' . $this->id . '.' . $this->coverTmp->extension;
        }
        if ($this->videoTmp){
          $this->video = 'img/orhidlegends/covers/' . $this->id . '.' . $this->videoTmp->extension;
          if (file_exists($this->video)) { // при update картинки
            unlink($this->video);
          }
          $this->videoTmp->saveAs($this->video);
        }
      }
      return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }

  public function afterSave($insert, $changedAttributes)
  {
    if (($this->title != "Title") && ($this->text != "Text")) {
      $photo = \yii\web\UploadedFile::getInstance($this, 'cover');
//ddd($photo);
      if ($photo) {
       // ddd($photo);
        $path = 'img/orhidlegends/covers/';// Путь для сохранения
        $bp=Yii::$app->basePath.'/web/';
        if (!file_exists($bp.$path)) {
          mkdir($path, 0777, true);   // Создаем директорию при отсутствии
        }

        $request = Yii::$app->request;
        $post = $request->post();

        $class = $this::className();
        $class = str_replace('\\', '/', $class);
        $class = explode('/', $class);
        $class = $class[count($class) - 1];
        $cropParam = array();
        if (isset($post[$class])) {
          $cropParam = explode('-', $post[$class]['cover']);
        }

        if (count($cropParam) != 4) {
          $cropParam = array(0, 0, 100, 100);
        }
        $image = Image::getImagine()->open($photo->tempName);
        $img = (new Image($photo->tempName));

        $imgWidth = $image->getSize()->getWidth();
        $imgHeight = $image->getSize()->getHeight();

        $cropParam[0] = (int)($cropParam[0] * $imgWidth / 100);
        $cropParam[1] = (int)($cropParam[1] * $imgHeight / 100);
        $cropParam[2] = (int)($cropParam[2] * $imgWidth / 100);
        $cropParam[3] = (int)($cropParam[3] * $imgHeight / 100);

        if (file_exists($this->cover)) { // при update картинки
          unlink($this->cover);
        }

        $img
          ->crop($photo->tempName, $cropParam[2] - $cropParam[0], $cropParam[3] - $cropParam[1], [$cropParam[0], $cropParam[1]])
          ->save($bp.$this->cover);

      }
    }
  }

  public function deleteVideo(){
    if (file_exists($this->video)) { // при update картинки
      unlink($this->video);
    }
    $this->video = null;
  }

  public function deleteEverything(){
    if (file_exists($this->video)) { // при update картинки
      unlink($this->video);
    }
    if (file_exists($this->cover)) { // при update картинки
      unlink($this->cover);
    }
    if (file_exists('legends_files/'.$this->id.'/')) { // при update картинки
      $this->delTree('legends_files/'.$this->id.'/');
    }

  }

  public static function delTree($dir) {
    $files = array_diff(scandir($dir), array('.','..'));
    foreach ($files as $file) {
      (is_dir("$dir/$file")) ? delTree("$dir/$file") : unlink("$dir/$file");
    }
    return rmdir($dir);
  }

  public function getPhotoCount(){
    $path = 'legends_files/'.$this->id.'/';

    if (!file_exists($path)) {
      return 0;
    };
    return count(scandir($path))-2;
  }
}
